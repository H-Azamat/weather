{"version":3,"sources":["api/api.js","components/Search/Search.jsx","assets/sun.svg","assets/cloud.svg","assets/rainy.svg","assets/snowy.svg","assets/drizzle.svg","components/WeatherCard/WeatherCard.jsx","assets/loading.svg","components/Loading/Loading.jsx","components/Forecast/Forecast.jsx","components/Forecast/ForecastContainer.jsx","components/Weather/Weather.jsx","App.js","index.js"],"names":["instance","axios","baseURL","API_KEY","WeatherApi","lat","lon","get","then","res","data","city","Seacrh","searchCityFunc","onSubmit","e","preventDefault","target","value","noValidate","autoComplete","TextField","className","id","label","variant","size","fullWidth","useStyles","makeStyles","card","width","margin","padding","cardImg","height","marginRight","cardContent","WeatherCard","temp","feelsLike","description","weather","otherData","date","useState","weatherImg","setWeatherImg","useEffect","snowy","cloud","drizzle","rainy","sun","classes","Card","raised","CardContent","Box","fontWeight","align","fontSize","letterSpacing","display","justifyContent","alignItems","src","alt","component","textAlign","humidity","windSpeed","Loading","loadingSvg","Forecast","weeks","forecast","length","map","day","dayId","Accordion","AccordionSummary","expandIcon","aria-controls","title","AccordionDetails","flexWrap","forecastId","Math","round","main","feels_like","wind","speed","dt_txt","ForecastContainer","this","createArr","dayOfWeek","isDate","days","props","elem","Date","toLocaleString","filterDays","Set","month","filter","filterForecast","React","Component","Weather","flexDirection","App","setCity","setTemp","setFeelsLike","setDescription","setWeather","setOtherData","setForecast","getWeather","name","list","navigator","geolocation","getCurrentPosition","pos","a","coords","latitude","longitude","searchCity","Container","maxWidth","bind","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.965671c6.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.openweathermap.org/data/2.5/\"\r\n})\r\n\r\nconst API_KEY = 'f37933e3e4d8fafe41b8ac27a02772ab';\r\n\r\nexport const WeatherApi = {\r\n    getWeatherByCord(lat, lon){\r\n        return instance.get(`weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`).then(res => res.data);\r\n    },\r\n    getWeatherByCity(city){\r\n        return instance.get(`weather?q=${city}&lang=ru&units=metric&appid=${API_KEY}`).then(res => res.data);\r\n    },\r\n    getForecast(city){\r\n        return instance.get(`forecast?q=${city}&lang=ru&units=metric&appid=${API_KEY}`).then(res => res.data);\r\n    }\r\n}","import { TextField } from '@material-ui/core';\r\n\r\nconst Seacrh = ({searchCityFunc}) => {\r\n\treturn (\r\n\t\t<form onSubmit={(e) => {\r\n\t\t\te.preventDefault()\r\n\t\t\tsearchCityFunc(e.target[0].value)\r\n\t\t\te.target[0].value = '';\r\n\t\t}} noValidate autoComplete=\"off\">\r\n\t\t  <TextField className='search' id=\"outlined-basic\" label=\"Введите город\" variant=\"outlined\" size=\"small\" fullWidth />\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default Seacrh;","export default __webpack_public_path__ + \"static/media/sun.4eccead1.svg\";","export default __webpack_public_path__ + \"static/media/cloud.fcffee55.svg\";","export default __webpack_public_path__ + \"static/media/rainy.b1c4d2b1.svg\";","export default __webpack_public_path__ + \"static/media/snowy.b349810c.svg\";","export default __webpack_public_path__ + \"static/media/drizzle.767428d2.svg\";","import { Box, Card, CardContent } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport sun from '../../assets/sun.svg';\r\nimport cloud from '../../assets/cloud.svg';\r\nimport rainy from '../../assets/rainy.svg';\r\nimport snowy from '../../assets/snowy.svg';\r\nimport drizzle from '../../assets/drizzle.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: '300px',\r\n        margin: '30px 0',\r\n        padding: '10px 0'\r\n    },\r\n    cardImg: {\r\n        height: '80px',\r\n        marginRight: '10px'\r\n    },\r\n    cardContent: {\r\n        padding: '5px 0'\r\n    },\r\n})\r\n\r\n\r\nconst WeatherCard = ({city, temp, feelsLike, description, weather, otherData, date = null}) => {\r\n\r\n    let [weatherImg, setWeatherImg] = useState();\r\n    useEffect(() => {\r\n        switch(weather){\r\n            case 'Snow': setWeatherImg(snowy); break;\r\n            case 'Clouds': setWeatherImg(cloud); break; \r\n            case 'Drizzle': setWeatherImg(drizzle); break;\r\n            case 'Rain': setWeatherImg(rainy); break;\r\n            case 'Clear': setWeatherImg(sun); break;\r\n            default: setWeatherImg(sun); \r\n        }\r\n    }, [weather])\r\n\r\n    const classes = useStyles()\r\n    return(\r\n        <Card raised className={classes.card}>\r\n            <CardContent>\r\n                <Box fontWeight=\"fontWeightBold\" align=\"center\" fontSize={28} letterSpacing={1.5}>{city}</Box>\r\n\r\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className={classes.cardContent}>\r\n                    <img src={weatherImg} alt={weather} className={classes.cardImg} />\r\n                    <Box component=\"span\" textAlign=\"center\" fontWeight=\"fontWeightBold\" fontSize={38}>{temp}&#8451;</Box>\r\n                </Box>\r\n\r\n                <Box textAlign=\"center\" fontWeight=\"fontWeightRegular\" fontSize={16}>{description}</Box>\r\n                <Box textAlign=\"center\" fontWeight=\"fontWeightRegular\" fontSize={15}>Ощущается как: {feelsLike}&#8451;</Box>\r\n                <Box>\r\n                    <Box textAlign=\"center\" fontWeight=\"fontWeightRegular\" fontSize={15}>Влажнось: {otherData.humidity}%</Box>\r\n                    <Box textAlign=\"center\" fontWeight=\"fontWeightRegular\" fontSize={15}>Ветер: {otherData.windSpeed}км/ч</Box>\r\n                </Box>\r\n                {date ? <Box textAlign=\"center\" fontWeight=\"fontWeightBold\" fontSize={13}><br />{date}</Box> : ''}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","export default __webpack_public_path__ + \"static/media/loading.1a189f18.svg\";","import { Box } from '@material-ui/core';\r\n\r\nimport loadingSvg from '../../assets/loading.svg';\r\n\r\nconst Loading = () => {\r\n\treturn(\r\n\t\t<Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n\t\t\t<img width=\"150px\" src={loadingSvg} alt=\"Загрузка...\" />\r\n\t\t</Box>\r\n\t)\r\n}\r\n\r\nexport default Loading;","import { Box } from '@material-ui/core';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nimport WeatherCard from '../WeatherCard/WeatherCard';\r\nimport Loading from '../Loading/Loading';\r\n\r\nconst Forecast = ({weeks}) => {\r\n\r\n\tif(weeks[0].forecast.length > 0){\r\n\t\treturn(\r\n\t\t\t<Box>\r\n\t\t\t\t<Box textAlign=\"center\" fontWeight=\"fontWeightBold\" fontSize={38}>Прогноз на неделю</Box><br />\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tweeks.map((day, dayId) => {\r\n\t\t\t\t\t\t\treturn <Accordion>\r\n\t\t\t\t\t\t        <AccordionSummary\r\n\t\t\t\t\t\t          expandIcon={<ExpandMoreIcon />}\r\n\t\t\t\t\t\t          aria-controls=\"panel1a-content\"\r\n\t\t\t\t\t\t          id=\"panel1a-header\"\r\n\t\t\t\t\t\t        >\r\n\t\t\t\t\t\t          <Box component=\"span\" fontWeight=\"fontWeightMedium\" fontSize={20}>{weeks[dayId].title}</Box>\r\n\t\t\t\t\t\t        </AccordionSummary>\r\n\t\t\t\t\t\t        <AccordionDetails>\r\n\t\t\t\t\t\t        \t<Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-around\">\r\n\t\t\t\t\t\t        \t\t{\r\n\t\t\t\t\t\t\t        \t\tweeks[dayId].forecast.map((forecast, forecastId) => {\r\n\t\t\t\t\t\t\t        \t\t\treturn <WeatherCard city='' temp={Math.round(forecast.main.temp)}\r\n\t\t\t\t\t\t\t\t          \t\tfeelsLike={Math.round(forecast.main.feels_like)} description={forecast.weather[0].description} \r\n\t\t\t\t\t\t\t\t          \t\tweather={forecast.weather[0].main} otherData={{\r\n\t\t\t\t\t\t\t\t\t\t\t      'humidity': forecast.main.humidity,\r\n\t\t\t\t\t\t\t\t\t\t\t      'windSpeed': Math.round(forecast.wind.speed * 3.6)\r\n\t\t\t\t\t\t\t\t\t\t\t    }} date={forecast.dt_txt} />\r\n\t\t\t\t\t\t\t        \t\t})\r\n\t\t\t\t\t\t\t        \t}\r\n\t\t\t\t\t\t        \t</Box>\r\n\t\t\t\t\t\t        </AccordionDetails>\r\n\t\t\t\t\t      \t</Accordion>\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</Box><br />\r\n\t\t\t</Box>\r\n\t\t)}\r\n\t\telse{\r\n\t\t\treturn <Loading />\r\n\t\t}\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\n\r\nimport Forecast from '../Forecast/Forecast';\r\n\r\nclass ForecastContainer extends React.Component {\r\n\r\n\tfilterForecast() {\r\n\t\treturn [\r\n\t\t\t\t{forecast: [...this.createArr(0)], title: this.createArr(0, true)[0]},\r\n\t\t\t\t{forecast: [...this.createArr(1)], title: this.createArr(1, true)[1]},\r\n\t\t\t\t{forecast: [...this.createArr(2)], title: this.createArr(2, true)[2]},\r\n\t\t\t\t{forecast: [...this.createArr(3)], title: this.createArr(3, true)[3]},\r\n\t\t\t\t{forecast: [...this.createArr(4)], title: this.createArr(4, true)[4]},\r\n\t\t\t\t{forecast: [...this.createArr(5)], title: this.createArr(5, true)[5]}\r\n\t\t\t]\r\n\t}\r\n\r\n\tcreateArr(dayOfWeek, isDate = false){\r\n\t\tconst days = this.props.forecast.map(elem => new Date(elem.dt_txt).toLocaleString('ru', {day: 'numeric'}))\r\n\t\tconst filterDays = [...new Set(days)];\r\n\r\n\t\tif(isDate){\r\n\t\t\treturn [...new Set(this.props.forecast.map(elem => \r\n\t\t\t\tnew Date(elem.dt_txt).toLocaleString('ru', {\r\n\t\t\t\t\tday: 'numeric', \r\n\t\t\t\t\tmonth: 'long'\r\n\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t)]\r\n\t\t}\r\n\r\n\t\treturn this.props.forecast.filter((elem, id) => {\r\n\t\t\treturn days[id] === filterDays[dayOfWeek] ? elem : ''})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<Forecast weeks={this.filterForecast()} />\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ForecastContainer;","import { Box } from '@material-ui/core';\r\n\r\nimport WeatherCard from '../WeatherCard/WeatherCard';\r\nimport ForecastContainer from '../Forecast/ForecastContainer';\r\n\r\nconst Weather = ({forecast, ...props}) => {\r\n\tif(props.city){\r\n\t\treturn (\r\n\t\t\t<Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n\t\t\t\t<WeatherCard {...props} />\r\n\t\t\t\t<ForecastContainer forecast={forecast} />\r\n\t\t\t</Box>\r\n\t\t)\r\n\t}else{\r\n\t\treturn <Box textAlign=\"center\" fontWeight=\"fontWeightBold\" fontSize={42}>Выберите город</Box>\r\n\t}\r\n}\r\n\r\nexport default Weather;","import { Container } from '@material-ui/core';\nimport { useState, useEffect } from 'react';\nimport { WeatherApi } from './api/api';\n\nimport './App.css';\n\nimport Seacrh from './components/Search/Search';\nimport Weather from './components/Weather/Weather';\n\nfunction App() {\n\n  let [city, setCity] = useState('');\n  let [temp, setTemp] = useState(0);\n  let [feelsLike, setFeelsLike] = useState(0);\n  let [description, setDescription] = useState('');\n  let [weather, setWeather] = useState('');\n  let [otherData, setOtherData] = useState({});\n  let [forecast, setForecast] = useState([]);\n\n  const getWeather = (res) => {\n    setCity(res.name)\n    setDescription(res.weather[0].description)\n    setWeather(res.weather[0].main)\n    setTemp(Math.round(res.main.temp))\n    setFeelsLike(Math.round(res.main.feels_like));\n    setOtherData({\n      'humidity': res.main.humidity,\n      'windSpeed': Math.round(res.wind.speed * 3.6) // метр/секунду в км/час\n    })\n    WeatherApi.getForecast(res.name).then(data => setForecast(data.list))\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async (pos) => {\n      await WeatherApi.getWeatherByCord(pos.coords.latitude, pos.coords.longitude).then(res => getWeather(res))\n    })\n  }, [])\n\n  const searchCityFunc = async (searchCity) => {\n    if(searchCity){\n      await WeatherApi.getWeatherByCity(searchCity).then(res => getWeather(res))\n    }\n  }\n\n  useEffect(() => {}, [city])\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n      \t<Seacrh searchCityFunc={searchCityFunc.bind(this)} />\n        <Weather forecast={forecast} city={city} temp={temp} feelsLike={feelsLike} description={description} weather={weather} otherData={otherData} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );"],"sourceRoot":""}